<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
<style>
    
:root {
    --g1: rgb(102, 255, 102);
    --g2: rgb(0, 102, 0);
    --g3: rgb(153, 255, 153);
}

@keyframes background-pan {
    from {
        background-position: 0% center;
    }

    to {
        background-position: -200% center;
    }
}

body {
    animation: background-pan 10s linear infinite;
    background: linear-gradient(
        to right,
        var(--g1),
        var(--g2),
        var(--g3)
    );
    background-size: 200%;
    height: 100vh;
    overflow: hidden;
    margin: 0px;
}

#tiles {
    height: 100vh;
    width: 100vh;

    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    grid-template-rows: repeat(var(--rows), 1fr);
}

.tile {
    background-color: rgb(20, 20, 20);
    outline: 1px transparent;
}
</style>
</head>

<body>
    
<div id="tiles"></div>




<script>

let columns = Math.floor(document.body.clientWidth / 50),
    rows = Math.floor(document.body.clientHeight / 50);

const createTile = index => {
    const tile = document.createElement("div");

    tile.classList.add("tile");

    return tile;
}

const createTiles = quantity => {
    Array.from (Array(quantity)).map((tile, index) => {
        wrapper.appendChild(createTile(index));
    })
}

const createGrid = () => {
    wrapper.innerHTML = "";

    columns = Math.floor(document.body.clientWidth / 50);
    rows = Math.floor(document.body.clientHeight / 50);

    wrapper.style.setProperty("--columns", columns);
    wrapper.style.setProperty("--rows", rows);

    createTiles(columns * rows);
}

window.onresize = () => createGrid();

</script>
</body>
</html>